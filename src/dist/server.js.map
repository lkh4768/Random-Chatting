{"version":3,"sources":["../es6/server.js"],"names":["ChattingManager","require","Server","socket","options","_socket","_chattingManager","_port","optionNames","port","_host","host","_backlog","backlog","self","listen","console","log","address","on","client","_connection","close","clientSocket","enterClient","module","exports"],"mappings":";;;;;;AAAA,IAAMA,kBAAkBC,QAAQ,uBAAR,CAAxB;;IACMC,M;AACJ,kBAAYC,MAAZ,EAAoBC,OAApB,EAA4B;AAAA;;AAC1B,SAAKC,OAAL,GAAeF,MAAf;AACA,SAAKG,gBAAL,GAAwB,IAAIN,eAAJ,EAAxB;AACA,QAAGI,OAAH,EAAW;AACT,WAAKG,KAAL,GAAcH,QAAQF,OAAOM,WAAP,CAAmBC,IAA3B,CAAD,GAAqCL,QAAQF,OAAOM,WAAP,CAAmBC,IAA3B,CAArC,GAAwEP,OAAOO,IAA5F;AACA,WAAKC,KAAL,GAAcN,QAAQF,OAAOM,WAAP,CAAmBG,IAA3B,CAAD,GAAqCP,QAAQF,OAAOM,WAAP,CAAmBG,IAA3B,CAArC,GAAwET,OAAOS,IAA5F;AACA,WAAKC,QAAL,GAAiBR,QAAQF,OAAOM,WAAP,CAAmBK,OAA3B,CAAD,GAAwCT,QAAQF,OAAOM,WAAP,CAAmBK,OAA3B,CAAxC,GAA8EX,OAAOW,OAArG;AACD,KAJD,MAKI;AACF,WAAKN,KAAL,GAAaL,OAAOO,IAApB;AACA,WAAKC,KAAL,GAAaR,OAAOS,IAApB;AACD;AACF;;;;0BACI;AAAA;;AACH,UAAIG,OAAO,IAAX;AACAA,WAAKT,OAAL,CAAaU,MAAb,CAAoBD,KAAKP,KAAzB,EAAgCO,KAAKJ,KAArC,EAA4CI,KAAKF,QAAjD,EAA2D,YAAI;AAC7DI,gBAAQC,GAAR,aAAsBH,KAAKT,OAAL,CAAaa,OAAb,GAAuBA,OAA7C,SAAwDJ,KAAKT,OAAL,CAAaa,OAAb,GAAuBT,IAA/E;AACA,cAAKJ,OAAL,CAAac,EAAb,CAAgB,YAAhB,EAA8B,UAACC,MAAD,EAAU;AAACN,eAAKO,WAAL,CAAiBD,MAAjB;AAA0B,SAAnE;AACD,OAHD;AAID;;;6BACO;AAAA;;AACN,WAAKf,OAAL,CAAaiB,KAAb,CAAmB,YAAI;AACrBN,gBAAQC,GAAR,aAAsB,OAAKZ,OAAL,CAAaa,OAAb,GAAuBA,OAA7C,SAAwD,OAAKb,OAAL,CAAaa,OAAb,GAAuBT,IAA/E;AACD,OAFD;AAGD;;;gCACWc,Y,EAAa;AACvBP,cAAQC,GAAR,uBAAgCM,aAAaL,OAAb,GAAuBA,OAAvD,SAAkEK,aAAaL,OAAb,GAAuBT,IAAzF;AACA,WAAKH,gBAAL,CAAsBkB,WAAtB,CAAkCD,YAAlC;AACD;;;;;;AAEHrB,OAAOO,IAAP,GAAc,IAAd;AACAP,OAAOS,IAAP,GAAc,WAAd;AACAT,OAAOW,OAAP,GAAiB,CAAjB;AACAX,OAAOM,WAAP,GAAqB,EAAEC,MAAM,MAAR,EAAgBE,MAAM,MAAtB,EAA8BE,SAAS,SAAvC,EAArB;AACAY,OAAOC,OAAP,GAAiBxB,MAAjB","file":"server.js","sourcesContent":["const ChattingManager = require('./chatting-manager.js');\r\nclass Server{\r\n  constructor(socket, options){\r\n    this._socket = socket;\r\n    this._chattingManager = new ChattingManager();\r\n    if(options){\r\n      this._port = (options[Server.optionNames.port])?  options[Server.optionNames.port] : Server.port;\r\n      this._host = (options[Server.optionNames.host])?  options[Server.optionNames.host] : Server.host;\r\n      this._backlog = (options[Server.optionNames.backlog])?  options[Server.optionNames.backlog] : Server.backlog;\r\n    }\r\n    else{\r\n      this._port = Server.port;\r\n      this._host = Server.host;\r\n    }\r\n  }\r\n  run(){\r\n    let self = this;\r\n    self._socket.listen(self._port, self._host, self._backlog, ()=>{\r\n      console.log(`server(${self._socket.address().address}:${self._socket.address().port}) bound`);\r\n      this._socket.on('connection', (client)=>{self._connection(client);});\r\n    });\r\n  }\r\n  _close(){\r\n    this._socket.close(()=>{\r\n      console.log(`server(${this._socket.address().address}:${this._socket.address().port}) closed`);\r\n    });\r\n  }\r\n  _connection(clientSocket){\r\n    console.log(`connected client(${clientSocket.address().address}:${clientSocket.address().port})`);\r\n    this._chattingManager.enterClient(clientSocket);\r\n  }\r\n}\r\nServer.port = 1000;\r\nServer.host = '127.0.0.1';\r\nServer.backlog = 5;\r\nServer.optionNames = { port: 'port', host: 'host', backlog: 'backlog' };\r\nmodule.exports = Server;"]}